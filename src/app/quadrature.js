const GAUSS_KRONROD_ABSCISSA = {
  21: [
    0.00000000000000000000000000000000000e+00,
    1.48874338981631210884826001129719985e-01,
    2.94392862701460198131126603103865566e-01,
    4.33395394129247190799265943165784162e-01,
    5.62757134668604683339000099272694141e-01,
    6.79409568299024406234327365114873576e-01,
    7.80817726586416897063717578345042377e-01,
    8.65063366688984510732096688423493049e-01,
    9.30157491355708226001207180059508346e-01,
    9.73906528517171720077964012084452053e-01,
    9.95657163025808080735527280689002848e-01,
  ],
  31: [
    0.00000000000000000000000000000000000e+00,
    1.01142066918717499027074231447392339e-01,
    2.01194093997434522300628303394596208e-01,
    2.99180007153168812166780024266388963e-01,
    3.94151347077563369897207370981045468e-01,
    4.85081863640239680693655740232350613e-01,
    5.70972172608538847537226737253910641e-01,
    6.50996741297416970533735895313274693e-01,
    7.24417731360170047416186054613938010e-01,
    7.90418501442465932967649294817947347e-01,
    8.48206583410427216200648320774216851e-01,
    8.97264532344081900882509656454495883e-01,
    9.37273392400705904307758947710209471e-01,
    9.67739075679139134257347978784337225e-01,
    9.87992518020485428489565718586612581e-01,
    9.98002298693397060285172840152271209e-01,
  ],
  61: [
    0.00000000000000000000000000000000000e+00,
    5.14718425553176958330252131667225737e-02,
    1.02806937966737030147096751318000592e-01,
    1.53869913608583546963794672743255920e-01,
    2.04525116682309891438957671002024710e-01,
    2.54636926167889846439805129817805108e-01,
    3.04073202273625077372677107199256554e-01,
    3.52704725530878113471037207089373861e-01,
    4.00401254830394392535476211542660634e-01,
    4.47033769538089176780609900322854000e-01,
    4.92480467861778574993693061207708796e-01,
    5.36624148142019899264169793311072794e-01,
    5.79345235826361691756024932172540496e-01,
    6.20526182989242861140477556431189299e-01,
    6.60061064126626961370053668149270753e-01,
    6.97850494793315796932292388026640068e-01,
    7.33790062453226804726171131369527646e-01,
    7.67777432104826194917977340974503132e-01,
    7.99727835821839083013668942322683241e-01,
    8.29565762382768397442898119732501916e-01,
    8.57205233546061098958658510658943857e-01,
    8.82560535792052681543116462530225590e-01,
    9.05573307699907798546522558925958320e-01,
    9.26200047429274325879324277080474004e-01,
    9.44374444748559979415831324037439122e-01,
    9.60021864968307512216871025581797663e-01,
    9.73116322501126268374693868423706885e-01,
    9.83668123279747209970032581605662802e-01,
    9.91630996870404594858628366109485725e-01,
    9.96893484074649540271630050918695283e-01,
    9.99484410050490637571325895705810819e-01,
  ]
};

const GAUSS_KRONROD_WEIGHTS = {
  21: [
    1.49445554002916905664936468389821204e-01,
    1.47739104901338491374841515972068046e-01,
    1.42775938577060080797094273138717061e-01,
    1.34709217311473325928054001771706833e-01,
    1.23491976262065851077958109831074160e-01,
    1.09387158802297641899210590325804960e-01,
    9.31254545836976055350654650833663444e-02,
    7.50396748109199527670431409161900094e-02,
    5.47558965743519960313813002445801764e-02,
    3.25581623079647274788189724593897606e-02,
    1.16946388673718742780643960621920484e-02,
  ],
  31: [
    1.01330007014791549017374792767492547e-01,
    1.00769845523875595044946662617569722e-01,
    9.91735987217919593323931734846031311e-02,
    9.66427269836236785051799076275893351e-02,
    9.31265981708253212254868727473457186e-02,
    8.85644430562117706472754436937743032e-02,
    8.30805028231330210382892472861037896e-02,
    7.68496807577203788944327774826590067e-02,
    6.98541213187282587095200770991474758e-02,
    6.20095678006706402851392309608029322e-02,
    5.34815246909280872653431472394302968e-02,
    4.45897513247648766082272993732796902e-02,
    3.53463607913758462220379484783600481e-02,
    2.54608473267153201868740010196533594e-02,
    1.50079473293161225383747630758072681e-02,
    5.37747987292334898779205143012764982e-03,
  ],
  61: [
    5.14947294294515675583404336470993075e-02,
    5.14261285374590259338628792157812598e-02,
    5.12215478492587721706562826049442083e-02,
    5.08817958987496064922974730498046919e-02,
    5.04059214027823468408930856535850289e-02,
    4.97956834270742063578115693799423285e-02,
    4.90554345550297788875281653672381736e-02,
    4.81858617570871291407794922983045926e-02,
    4.71855465692991539452614781810994865e-02,
    4.60592382710069881162717355593735806e-02,
    4.48148001331626631923555516167232438e-02,
    4.34525397013560693168317281170732581e-02,
    4.19698102151642461471475412859697578e-02,
    4.03745389515359591119952797524681142e-02,
    3.86789456247275929503486515322810503e-02,
    3.68823646518212292239110656171359677e-02,
    3.49793380280600241374996707314678751e-02,
    3.29814470574837260318141910168539275e-02,
    3.09072575623877624728842529430922726e-02,
    2.87540487650412928439787853543342111e-02,
    2.65099548823331016106017093350754144e-02,
    2.41911620780806013656863707252320268e-02,
    2.18280358216091922971674857383389934e-02,
    1.94141411939423811734089510501284559e-02,
    1.69208891890532726275722894203220924e-02,
    1.43697295070458048124514324435800102e-02,
    1.18230152534963417422328988532505929e-02,
    9.27327965951776342844114689202436042e-03,
    6.63070391593129217331982636975016813e-03,
    3.89046112709988405126720184451550328e-03,
    1.38901369867700762455159122675969968e-03,
  ]
};

const GAUSS_ABSCISSA = {
  10: [
    1.48874338981631210884826001129719985e-01,
    4.33395394129247190799265943165784162e-01,
    6.79409568299024406234327365114873576e-01,
    8.65063366688984510732096688423493049e-01,
    9.73906528517171720077964012084452053e-01
  ],
  15: [
    0.00000000000000000000000000000000000e+00,
    2.01194093997434522300628303394596208e-01,
    3.94151347077563369897207370981045468e-01,
    5.70972172608538847537226737253910641e-01,
    7.24417731360170047416186054613938010e-01,
    8.48206583410427216200648320774216851e-01,
    9.37273392400705904307758947710209471e-01,
    9.87992518020485428489565718586612581e-01,
  ],
  30: [
    5.14718425553176958330252131667225737e-02,
    1.53869913608583546963794672743255920e-01,
    2.54636926167889846439805129817805108e-01,
    3.52704725530878113471037207089373861e-01,
    4.47033769538089176780609900322854000e-01,
    5.36624148142019899264169793311072794e-01,
    6.20526182989242861140477556431189299e-01,
    6.97850494793315796932292388026640068e-01,
    7.67777432104826194917977340974503132e-01,
    8.29565762382768397442898119732501916e-01,
    8.82560535792052681543116462530225590e-01,
    9.26200047429274325879324277080474004e-01,
    9.60021864968307512216871025581797663e-01,
    9.83668123279747209970032581605662802e-01,
    9.96893484074649540271630050918695283e-01,
  ]
};

const GAUSS_WEIGHTS = {
  10: [
    2.95524224714752870173892994651338329e-01,
    2.69266719309996355091226921569469353e-01,
    2.19086362515982043995534934228163192e-01,
    1.49451349150580593145776339657697332e-01,
    6.66713443086881375935688098933317929e-02
  ],
  15: [
    2.02578241925561272880620199967519315e-01,
    1.98431485327111576456118326443839325e-01,
    1.86161000015562211026800561866422825e-01,
    1.66269205816993933553200860481208811e-01,
    1.39570677926154314447804794511028323e-01,
    1.07159220467171935011869546685869303e-01,
    7.03660474881081247092674164506673385e-02,
    3.07532419961172683546283935772044177e-02,
  ],
  30: [
    1.02852652893558840341285636705415044e-01,
    1.01762389748405504596428952168554045e-01,
    9.95934205867952670627802821035694765e-02,
    9.63687371746442596394686263518098651e-02,
    9.21225222377861287176327070876187672e-02,
    8.68997872010829798023875307151257026e-02,
    8.07558952294202153546949384605297309e-02,
    7.37559747377052062682438500221907342e-02,
    6.59742298821804951281285151159623612e-02,
    5.74931562176190664817216894020561288e-02,
    4.84026728305940529029381404228075178e-02,
    3.87991925696270495968019364463476920e-02,
    2.87847078833233693497191796112920436e-02,
    1.84664683110909591423021319120472691e-02,
    7.96819249616660561546588347467362245e-03,
  ]
};

const ROOT_EPSILON = Math.sqrt(Number.EPSILON);

class GaussKronrod {
  constructor(N=21, maxDepth=15, maxRelativeError=ROOT_EPSILON) {
    this.N = N;
    this.maxDepth = maxDepth;
    this.maxRelativeError = maxRelativeError;
    this.error = 0;
  }

  _integrateNonAdaptive(f) {
    let N = this.N;
    let gauss_start = 2;
    let kronrod_start = 1;
    let gauss_order = (N - 1) / 2;
    let kronrod_result = 0;
    let gauss_result = 0;
    let fp, fm;

    if (gauss_order & 1) {
      fp = f(0);
      kronrod_result = fp * GAUSS_KRONROD_WEIGHTS[N][0];
      gauss_result += fp * GAUSS_WEIGHTS[(N - 1) / 2][0];
    }
    else {
      fp = f(0);
      kronrod_result = fp * GAUSS_KRONROD_WEIGHTS[N][0];
      gauss_start = 1;
      kronrod_start = 2;
    }

    for (let i = gauss_start; i < GAUSS_KRONROD_ABSCISSA[N].length; i += 2) {
      fp = f(GAUSS_KRONROD_ABSCISSA[N][i]);
      fm = f(-GAUSS_KRONROD_ABSCISSA[N][i]);
      kronrod_result += (fp + fm) * GAUSS_KRONROD_WEIGHTS[N][i];
      gauss_result += (fp + fm) * GAUSS_WEIGHTS[(N - 1) / 2][Math.floor(i / 2)];
    }

    for (let i = kronrod_start; i < GAUSS_KRONROD_ABSCISSA[N].length; i += 2) {
      fp = f(GAUSS_KRONROD_ABSCISSA[N][i]);
      fm = f(-GAUSS_KRONROD_ABSCISSA[N][i]);
      kronrod_result += (fp + fm) * GAUSS_KRONROD_WEIGHTS[N][i];
    }

    let error = Math.max(Math.abs(kronrod_result - gauss_result), Math.abs(kronrod_result * Number.EPSILON * 2));
    return [kronrod_result, error];
  }

  _recursiveAdaptiveIntegrate(f, a, b, max_levels, abs_tol) {
    let error_local;
    let estimate;
    let mean = (b + a) / 2;
    let scale = (b - a) / 2;
    let ff = x => { return f(scale * x + mean); };
    [estimate, error_local] = this._integrateNonAdaptive(ff);
    estimate *= scale;

    let abs_tol1 = Math.abs(estimate * this.maxRelativeError);
    if (!abs_tol) {
      abs_tol = abs_tol1;
    }

    if (max_levels && (abs_tol < error_local)) {
      let mid = (a + b) / 2;
      [estimate, ] = this._recursiveAdaptiveIntegrate(f, a, mid, max_levels - 1, abs_tol / 2);
      let result = this._recursiveAdaptiveIntegrate(f, mid, b, max_levels - 1, abs_tol / 2);
      estimate += result[0];
      this.error += result[1];
      return [estimate, error_local];
    }

    this.error = error_local;
    // console.log(
    //   `${a.toString().padEnd(15)}`,
    //   `${b.toString().padEnd(15)}`,
    //   `${max_levels.toString().padEnd(5)}`,
    //   `${abs_tol.toExponential(2).padEnd(11)}`,
    //   `${estimate.toFixed(4).padEnd(10)}`,
    //   `${error_local.toExponential(2).padStart(5).padEnd(11)}`,
    // );
    return [estimate, error_local];
  }

  integrate(f, a, b) {
    let result;
    if (isFinite(a) && isFinite(b)) {
      result = this._recursiveAdaptiveIntegrate(f, a, b, this.maxDepth, 0);
    }
    else {
      throw new Error("Additional integration limits not implemented");
    }
    return result;
  }
}

function _test() {
  let integ = new GaussKronrod(21, 15, 1e-30);
  let f = x => Math.exp(-x * x / 2);
  console.log(integ.integrate(f, 0, 10));
}

export { GaussKronrod };